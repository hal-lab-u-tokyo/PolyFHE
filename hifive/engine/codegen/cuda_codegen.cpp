#include "hifive/engine/codegen/cuda_codegen.hpp"

#include "hifive/core/logger.h"
#include "hifive/engine/codegen/codegen_writer.hpp"

namespace hifive {
namespace engine {
bool CudaCodegen::run_on_graph(std::shared_ptr<hifive::core::Graph>& graph) {
    LOG_INFO("Running CudaCodegen\n");

    CodeWriter w;
    w << "// This file is generated by HiFive\n";
    w << "#include <cuda.h>\n";
    w << "#include <cuda_runtime.h>\n";
    w << "#include <iostream>\n";

    w << "int main(int argc, char *argv[])";
    w.block_begin();
    w << "std::cout << \"Starting Benchmarking...\" << std::endl;\n";
    w << "// cuda_init();\n\n";

    w << "// Input arguments\n";
    std::shared_ptr<hifive::core::Node> init_node = graph->get_init_node();
    int i = 0;
    for (auto edge : init_node->get_out_edges()) {
        std::shared_ptr<hifive::core::Node> e = edge->get_dst();
        std::string name_h =
            "input" + std::to_string(i) + "_" + e->get_op_name() + "_h";
        std::string name_d =
            "input" + std::to_string(i) + "_" + e->get_op_name() + "_d";
        std::string name_size = "sizeof(uint64_t) * " +
                                std::to_string(edge->get_shape(0)) + " * " +
                                std::to_string(edge->get_shape(1));
        w << "// Edge: " << init_node->get_op_name() << " -> "
          << e->get_op_name() << "\n";
        w << "uint64_t *" << name_h << ";\n";
        w << "uint64_t *" << name_d << ";\n";
        w << "cudaMallocHost((void **)&" << name_h << ", " << name_size
          << ");\n";
        w << "cudaMalloc((void **)&" << name_d << ", " << name_size << ");\n";
        i++;
    }

    w << "\n// Output arguments\n";
    std::shared_ptr<hifive::core::Node> exit_node = graph->get_exit_node();
    i = 0;
    for (auto edge : exit_node->get_in_edges()) {
        std::shared_ptr<hifive::core::Node> e = edge->get_src();
        std::string name_h =
            "output" + std::to_string(i) + "_" + e->get_op_name() + "_h";
        std::string name_d =
            "output" + std::to_string(i) + "_" + e->get_op_name() + "_d";
        std::string name_size = "sizeof(uint64_t) * " +
                                std::to_string(edge->get_shape(0)) + " * " +
                                std::to_string(edge->get_shape(1));
        w << "// Edge: " << e->get_op_name() << " -> "
          << exit_node->get_op_name() << "\n";
        w << "uint64_t *" << name_h << ";\n";
        w << "uint64_t *" << name_d << ";\n";
        w << "cudaMallocHost((void **)&" << name_h << ", " << name_size
          << ");\n";
        w << "cudaMalloc((void **)&" << name_d << ", " << name_size << ");\n";
        i++;
    }

    w << "std::cout << \"Finished Benchmarking...\" << std::endl;\n";
    w.block_end();

    w.write_to_file("build/gen_cuda_main.cu");
    return true;
}
} // namespace engine
} // namespace hifive